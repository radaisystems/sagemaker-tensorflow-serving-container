
ARG TFS_SHORT_VERSION
ARG TFS_VERSION
ARG TF_TENSORRT_VERSION
ARG LIBNVINFER_VERSION

ARG ARCH
ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_REGION=us-west-2

FROM tensorflow/serving:${TFS_VERSION}-gpu as tfs
FROM nvidia/cuda:10.0-base-ubuntu16.04

ENV NCCL_VERSION=2.4.2
ENV CUDNN_VERSION=7.4.2.24
ENV TF_TENSORRT_VERSION=5.0.2
ENV LIBNVINFER_VERSION=5

LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

COPY --from=tfs /usr/bin/tensorflow_model_server /usr/bin/tensorflow_model_server
# COPY models /opt/ml/model/export/Servo/1/


RUN \
    apt-get update && apt-get install -y --no-install-recommends \
        ca-certificates \
        cuda-command-line-tools-10-0 \
        cuda-command-line-tools-10-0 \
        cuda-cublas-10-0 \
        cuda-cufft-10-0 \
        cuda-curand-10-0 \
        cuda-cusolver-10-0 \
        cuda-cusparse-10-0 \
        libcudnn7=${CUDNN_VERSION}-1+cuda10.0 \
        libnccl2=${NCCL_VERSION}-1+cuda10.0 \
        libgomp1 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda${CUDA_VERSION}
# adds a new list which contains libnvinfer library, so it needs another
# 'apt-get update' to retrieve that list before it can actually install the
# library.
# We don't install libnvinfer-dev since we don't need to build against TensorRT,
# and libnvinfer4 doesn't contain libnvinfer.a static library.
RUN apt-get update && \
    apt-get install --no-install-recommends \
        nvinfer-runtime-trt-repo-ubuntu1604-${TF_TENSORRT_VERSION}-ga-cuda10.0 && \
    apt-get update && \
    apt-get install --no-install-recommends \
        libnvinfer${LIBNVINFER_VERSION}=${TF_TENSORRT_VERSION}-1+cuda10.0 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* && \
    rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* && \
    rm /usr/lib/x86_64-linux-gnu/libnvparsers*

# nginx + njs
RUN \
    apt-get update && \
    apt-get -y install --no-install-recommends curl && \
    curl -s http://nginx.org/keys/nginx_signing.key | apt-key add - && \
    echo 'deb http://nginx.org/packages/ubuntu/ xenial nginx' >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get -y install --no-install-recommends nginx nginx-module-njs python3 python3-pip && \
    apt-get clean

COPY ./ /


ENV SAGEMAKER_TFS_VERSION "${TFS_SHORT_VERSION}"
ENV PATH "$PATH:/sagemaker"
ENV SAGEMAKER_TFS_DEFAULT_MODEL_NAME=ctap
ENV SAGEMAKER_TFS_NGINX_LOGLEVEL=error
ENV SAGEMAKER_BIND_TO_PORT=8080
ENV SAGEMAKER_SAFE_PORT_RANGE=9000-9999
RUN apt-get -y install --no-install-recommends python3-setuptools
RUN pip3 --no-cache-dir install --upgrade awscli

RUN aws s3 cp s3://juno-production/1553805501/variables/variables.data-00000-of-00001_863cb673080abef6834c7fea4ac96e5f59e9ea086610b80b4e2ecc976bbcdc2c_560494552 /opt/ml/model/export/Servo/1/ctap/variables
RUN aws s3 cp s3://juno-production/1553805501/variables/variables.index_5fa6a03134e6f415217c786057518b8c7f0e21f1afbc0fa2f50172af5816312b_23259 /opt/ml/model/export/Servo/1/ctap/variables
RUN aws s3 cp s3://juno-production/1553805501/saved_model.pbtxt_fa58d42a251698d3415559c9fec990bcaac1f7a99f6e39fad8c0b4494799514b_20651483 /opt/ml/model/export/Servo/1/ctap/saved_model.pb

